version: "3.9"

services:
  db:
    image: postgres
    env_file:
      - .env
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 35s
      retries: 5

  user:
    build: ./user
    env_file:
      - ./user/.env
    container_name: user_service
    ports:
      - "5000:5000"
    volumes:
      - app_data:/var/log
    networks:
      - grafana
      - default
    depends_on:
      - db
      - consul

  payment:
    build: ./payments
    env_file:
      - ./payments/.env
    container_name: payment_service
    ports:
      - "5002:5002"
    volumes:
      - app_data:/var/log      
    networks:
      - grafana
      - default
    depends_on:
      - db
      - consul

  product:
    build: ./product
    env_file:
      - ./product/.env
    container_name: product_service
    ports:
      - "5001:5001"
    volumes:
      - app_data:/var/log      
    networks:
      - grafana
      - default
    depends_on:
      - db
      - consul

  order:
    build: ./order
    env_file:
      - ./order/.env
    container_name: order_service
    ports:
      - "5003:5003"
    volumes:
      - app_data:/var/log      
    networks:
      - grafana
      - default      
    depends_on:
      - db
      - consul

  notifications:
    build: ./notifications
    env_file:
      - ./notifications/.env
    container_name: notifications_service
    ports:
      - "5004:5004"
    volumes:
      - app_data:/var/log      
    networks:
      - grafana
      - default
    depends_on:
      - db
      - consul

  cart:
    build: ./cart
    env_file:
      - ./cart/.env
    container_name: cart_service
    ports:
      - "5005:5005"
    volumes:
      - app_data:/var/log      
    networks:
      - grafana
      - default
    depends_on:
      - db
      - consul

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - user
      - product
      - payment
      - cart
      - order
      - notifications

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: nginx_exporter
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    ports:
      - "9113:9113"
    networks:
      -  grafana
    depends_on:
      - nginx

  consul:
    image: hashicorp/consul:1.15.4
    container_name: consul
    ports:
      - "8500:8500"
    command: "agent -dev -client=0.0.0.0"
    networks:
      - default

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml
    networks:
      - grafana

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - grafana

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - app_data:/var/log
      - ./promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - grafana
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:11.3.0
    ports:
      - "3000:3000"
    networks:
      - grafana
    environment:
      - "GF_DEFAULT_APP_MODE=development"
      - "GF_LOG_LEVEL=debug"
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - loki
      - prometheus

  alertmanager:
    image: prom/alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/alertmanager.yml
    command: --config.file=/alertmanager.yml --log.level=debug
    networks:
      - grafana

networks:
  default:
    driver: bridge
  grafana:
    driver: bridge

volumes:
  postgres_data:
  grafana:
  app_data: {}
